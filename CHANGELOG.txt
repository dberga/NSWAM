-----v1 (version 1)

1.changed the structure of folders from a single folder of 191 files to a folder of the following structure:
			include/ ->include files for dependencies (color opponents, decompositions, csf, convol...)
			libs/ ->other projects (ciwam...)
			input/ ->input files (images or videos)
			output/ ->output files (smaps or perc. images)
			src/	->main model files (NCZLd ...)
			
2. added DWT and IDWT decomp. and inv.decomp for case of 'wav', it was missing
3. changed output types (image or saliency) for cases of:
	-output_from_model (case 'M' or 'M&w')
	-output_from_csf (case 'model','eCSF' or 'model&eCSF')
	-output_from_residu (case '1' or '0')

-----v2 (version 2)

1. general_NCZLd: overwrite of struct parameters (zli, display_plot, compute, wave...), copied/overwritten in get_default_parameters
2. general_NCZLd: removed temporal function variables (ex. zli, display_plot ...), now usage of struct variables (less memory usage, less code)...
3. general_NCZLd,NCZLd,NCZLd_per_channel,NCZLd_ON_OFF: nstripes parameter set on struct.image.nstripes (no usage as argument on each function)
4. general_NCZLd: erased duplicities, functionalities inside functions 
5. general_NCZLd: added dynamic case for general_NCZLd_setstimulus
6. NCZLd: removed temporal function variables (ex. zli, display_plot ...), now usage of struct variables (less memory usage, less code)...
7. NCZLd: erased duplicities, functionalities inside functions 
... for NCZLd_channel
9. default parameters: zli.fin_scale, zli.fin_scale_offset, zli.ini_scale changed to  wave.fin_scale, wave.fin_scale_offset, wave.ini_scale 
10. NCZLd_channel: erased img = double(img_in), using img_in = double(img_in)
11. NCZLd_channel: repaired variable names and values for fin_scale (equal to n_scales - offset)
12. NCZLd_channel: added functions for making means selecting specific frames (ex. tinit=6, tfinal=10)
13. NCZLd_channel: added functions for displaying/plotting matrixes on scale and orientation, per channel
14. NCZLd_channel: erased duplicated redefinition of struct.wave.fin_scale, now in NCZLd
15. executa: added saliency procedure on saliency_naila. executa executes saliency for SWAM and NCZLd

------v3 version 3

1. model_utils/tmatrix_to_matrix: functions for meanizing portions of matrix on time
2. load_store/display_functions: functions for displaying matrixes on scale, orientation...
3. load_store/store_functions: functions for storing and matrixes on scale, orientation...
4. erased whitening function (tmp-128)*0.75+128 ...
5. added functionality for using color opponents
6. fixed outputfromcsf function, it was using fin_scale as argument to put the residual, now using n_scales

------v4 version 4


1. added metrics file in libs
2. fixed error on using uniform image (ex. image that has no red or green, has zeros, so that do no process but not crash)
3. metrics with reading file lists, outputting scores, means of scores and stds for each method
4. removed libs "CiWAM", "SWAM_for_distro", these are now outside this framework

------v5 version 5

1. implemented for output as specified extension (mat, jpg, png...)
2. storing mats for each channel
3. general storing procedure for Rmodelinduction and channel_ON_OFF files
4. implemented recall and file utils (RF to img_out, img_out to smap), which allows to read mats and do reconstruction of images, then converting to smaps


------v6 version 6

1. cluster scripts done
2. added "display_plot.store_irrelevant" (it allows to store only relevant parameters, as iFactor, eCSF, residual, struct...)

------v7 version 7

1. resized input images is available (autoresize function)
2. store mats correctly (only iFactor, struct, residual (c) and Ls)
3. compute neurodynamic only if the output does not exist, computer only recall if mats exist

------v8 version 8

1. implemented smap for channel combination (channel opponents) of squared mean (already existing) "channelsqmean", pointwise max "channelmax" and wta channel "channelwta"
2. fixed typo in condition before recall [") exist(" to ") && exist("]
3. for monochromatic images, copy channels 2 and 3 as same as 1st channel, otherwise NCZLd only computes intensity and recall fails on taking other channels
4. do not discriminate on processing neurodynamic when image is uniform (need to recall from chromatic, chromatic2)

------v9 version 9

1. implemented pmax2 smethod (max on orientation and channel)
2. residual forced to zeros (already done in the past, redone in recall code)
3. reduccio relative to Delta (adjustable connectivity matrix factor)


------v10 version 10

1. parametrized orgb_flag (enable or disable opponent2rgb at the end)
2. parametrized energy_norm (enable or disable energy normalization at the end)
3. parametrized autoresize_ds
4. kappax and kappay relative to reduccio
5. implemented autoresize_nd
6. parametrized autoresize_nd
7. parametrized tmem_res (temporal fusion using max or mean) and tmem_rw_res (temporal fusion before (1) or after (0) reconstruction - for single or for all tmem)
8. parametrized delete_mats
9. output subfolder is the name of the conf_struct (you can now compute several configurations)

------v11 version 11

1. implemented distort_gaussian (sums a gaussian to each channel)

------v12 version 12

1. implemented distort_fisheye (makes fisheye on specific centroid)
2. implemented foveate (taking fov_type: gaussian, fisheye...)
3. parametrized fov_type
4. implemented zli_magnification

------v13 version 13

1. implemented fusion with (values-mean)/stdev
2. reordered steps on reconstruction
   -> from:
	1. compute eCSF
	2. make pmax2
	3. normalization with zli Z
	4. make temporal mean
   ->changed again:
	1. make temporal mean
	2. compute ecsf
	3. make pmax2
	4. normalization with zli Z
3. implemented Cortex2Image, Image2Cortex
4. implemented Cortex2Polar, Polar2Cortex
5. fixed zli_magnification, now with Cortex2Image
6. fixed zli_magnification_inv, now with Image2Cortex
7. reuse .mats with iFactor and residuals from a specific folder, not from config
	->al usar el foveal, se tendrÃ¡ que hacer neurodinamico siempre, por lo tanto, tendran que guardarse mats para cada fijacion
8. changed conf variables on default_struct.mat and code,
	struct.compute -> there are the variables that can be changed on reconstruction (variables that take effect after neurodynamic processing) -> ex. output_from_ecsf ...
	struct.image -> there are the variables that cannot be changed on reconstruction (variables that take effect before neurodynamic processing) -> ex. autoresize...
	struct.zli -> there are the variables that cannot be changed on reconstruction (variables that take effect before neurodynamic processing) -> ex. reduccio_RW
	struct.csfparams -> there are the variables that can be changed on reconstruction (variables that take effect after neurodynamic processing) -> ex. nu_0
	struct.wave -> there are the variables that cannot be changed on reconstruction (variables that take effect before neurodynamic processing) -> ex. multires (n_scales and n_orient will be automatically calculated, given multires)

------v13-2 version 13-2

1. Fixed Cortex2Image and Image2Cortex, as well as distort_magnification and distort_magnification_inv. (rows and cols, corresponding to fixcoord corrected)
2. added function recoord (avoid out of memory)
3. creared function confgen (config generator) - pending to finish

-----v14 version 14

1. finished the confgen function
2. changed autoresize_ds and saliency.m for autoresizing proportionally according to less than 1024

-----v15 version 15

1. added saliency2,executa2 for executing the model for all config without using the neurodynamical system (only reconstruct if mats are found)
2. symbolic links to mats are done
3. foveal code done, distort (vPixel2vAngle, vAngle2rAngle, rAngle2rPixel), undistort (rPixel2rAngle, rAngle2vAngle, vAngle2vPixel)
	-also done frame removal if needed (clean_distort_frames)
	-also done *alternative solutions for vAngle2rAngle and rAngle2vAngle
4. added executa2 and saliency2 (which will compute all smaps but in case there is no "mat" file, it will not compute neurodynamic)
   also added executa3 which will compute configurations in conf3

-----v16 version 16

1. erased duplicated borders on foveal distortion (for negative values getting to positive on vAngle2rAngle)
2. added code of foveal distortion on saliency, added code of foveal undistortion on recall
3. added code on saliency and recall for input of folders/paths
4. changed code, erased general_NCZLd, NCZLd_channel, every step is in NCZLd
5. add padding on rectangular images (be careful on undistortion)
6. padding (black) to mean of image (to avoid activity)
7. separar struct del saliency y struct del recall (sino el undistort pilla fixationX,fixationY considerando padding (mal))
8. hacer funcion que elimina padding de una imagen (segun token de color)
x-9. corregir codigo fovea
x-10. aplicar padding y demas a la correccion de fovea
11. agregar funciones para eliminar outliers (nan, inf) y tambien para mapeo de coordenadas
12. cortical magnification en mapImage2Cortex y mapCortex2Image (xavi), distort_cortex y undistort_cortex (david)
13. implemented IG metric
x-14. fix metrics (some use binary maps, others use density maps)
15. added normamize_Zp (zli normalization erasing zeros)

-----v17 version 17

x-1. no usar valor del mean para el padding sino utilizar los bordes o bien algun otro tipo
2. path de output de mats y demas, guardarlo en struct y reutilizarlo (modificar tambien load_default_parameters)
3. mezclar codigo de NCZLd, saliency y recall y RF_to_smap separar cosas en plan pre-neurodynamic, post-neurodynamic
-4. fixed distortion with wavelets
-5. fixed problems with time for each fixation on GT (tmem relative to fixation time)
-6. fixed problems with starting point on GT (tmem relative to fixation time)
-7. eliminar padding en imagenes que tienen padding (muchas sinteticas tienen padding gris por defecto)
-8. no reutilizar mats si el image_struct no tiene los pre-neurodyn parametros iguales a los de la struct

-----v18 version 18

-1. implement scanpath (several fixations)
	-output coords of fixations
	-output of smaps
	-output of image with fixation points, with scanpath in order (dibuix)
2. parse GT datasets of scanpath
3. make code for metrics/evaluation of scanpath

-----v19 version 19

1. use mex as neurodynamic, modify config structure
2. dynamic saliency with videos
3. multilayer (input other values on other RF)
	-motion
	-disparity
	-recognition




